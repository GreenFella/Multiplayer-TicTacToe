<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">
    <title>TicTacToe</title>
    <link rel="stylesheet" href="cssfile.css">

<style>
  .content {
    text-align: center;
}

.rect1css:hover {
    opacity: 0;
}
.rect2css:hover {
    opacity: 0;
}
.rect3css:hover {
    opacity: 0;
}
.rect4css:hover {
    opacity: 0;
}
.rect5css:hover {
    opacity: 0;
}
.rect6css:hover {
    opacity: 0;
}
.rect7css:hover {
    opacity: 0;
}
.rect8css:hover {
    opacity: 0;
}
.rect9css:hover {
    opacity: 0;
}

@font-face { font-family: silkscreen; src: url('slkscr.ttf'); }

</style>

</head>
<body style="background-color: black">
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js" integrity="sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

    <div class="content">
      <br> 
<h1 style="color:white; font-family:silkscreen">TicTacToe</h1>
<h5 style="color:red; font-family:Monospace" id="matchStatus">Press 'Find a match!' to begin searching for a match</h5>
<div class="container" style="height: 50px; width: 174px">
  <button id="button1" onclick="findPlayerButton()" style="color:white; font-family:Monospace" class="btn">Find a match!</button> 
</div> 
<button id="button2" onclick="playAgainstAI()" style="color:white; font-family:Monospace" class="btn">Or play against a bot!</button> 
<br> <br>

<div id="myNav" class="overlay">
  <div class="overlay-content">
    <h1 id="endScreen"></h1>
    <a href="" onclick="closeNav()">Continue...</a>
  </div>
</div>

<svg width="700" height="700">

<line x1="233" y1="0" x2="233" y2="700" stroke="white"/>
<line x1="466" y1="0" x2="466" y2="700" stroke="white"/>
<line x1="0" y1="233" x2="700" y2="233" stroke="white"/>
<line x1="0" y1="466" x2="700" y2="466" stroke="white"/>

<circle id="circ1" cx="116.5" cy="116.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ2" cx="349.5" cy="116.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ3" cx="582.5" cy="116.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ4" cx="116.5" cy="349.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ5" cx="349.5" cy="349.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ6" cx="582.5" cy="349.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ7" cx="116.5" cy="582.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ8" cx="349.5" cy="582.5" r="100" fill="none" stroke="none" stroke-width="15"/>
<circle id="circ9" cx="582.5" cy="582.5" r="100" fill="none" stroke="none" stroke-width="15"/>

<!--210px between the x and y points-->
<line id="line1" x1="11.5" y1="11.5" x2="221.5" y2="221.5" stroke="none" stroke-width="15"/>
<line id="line11" x1="11.5" y1="221.5" x2="221.5" y2="11.5" stroke="none" stroke-width="15"/>

<line id="line2" x1="246" y1="11.5" x2="456" y2="221.5" stroke="none" stroke-width="15"/>
<line id="line21" x1="246" y1="221.5" x2="456" y2="11.5" stroke="none" stroke-width="15"/>

<line id="line3" x1="480.5" y1="11.5" x2="690.5" y2="221.5" stroke="none" stroke-width="15"/>
<line id="line31" x1="480.5" y1="221.5" x2="690.5" y2="11.5" stroke="none" stroke-width="15"/>

<line id="line4" x1="11.5" y1="246" x2="221.5" y2="456" stroke="none" stroke-width="15"/>
<line id="line41" x1="11.5" y1="456" x2="221.5" y2="246" stroke="none" stroke-width="15"/>

<line id="line5" x1="246" y1="246" x2="456" y2="456" stroke="none" stroke-width="15"/>
<line id="line51" x1="246" y1="456" x2="456" y2="246" stroke="none" stroke-width="15"/>

<line id="line6" x1="480.5" y1="246" x2="690.5" y2="456" stroke="none" stroke-width="15"/>
<line id="line61" x1="480.5" y1="456" x2="690.5" y2="246" stroke="none" stroke-width="15"/>

<line id="line7" x1="11.5" y1="479" x2="221.5" y2="689" stroke="none" stroke-width="15"/>
<line id="line71" x1="11.5" y1="689" x2="221.5" y2="479" stroke="none" stroke-width="15"/>

<line id="line8" x1="246" y1="479" x2="456" y2="689" stroke="none" stroke-width="15"/>
<line id="line81" x1="246" y1="689" x2="456" y2="479" stroke="none" stroke-width="15"/>

<line id="line9" x1="480.5" y1="479" x2="690.5" y2="689" stroke="none" stroke-width="15"/>
<line id="line91" x1="480.5" y1="689" x2="690.5" y2="479" stroke="none" stroke-width="15"/>

<rect class="rect1css" id="rect1" onclick="place(rect1.id)" x="1.5" y="1.5" width="230" height="230" fill="black"/>
<rect class="rect2css" id="rect2" onclick="place(rect2.id)" x="234.5" y="1.5" width="230" height="230" fill="black"/>
<rect class="rect3css" id="rect3" onclick="place(rect3.id)" x="467.5" y="1.5" width="230" height="230" fill="black"/>
<rect class="rect4css" id="rect4" onclick="place(rect4.id)" x="1.5" y="234.5" width="230" height="230" fill="black"/>
<rect class="rect5css" id="rect5" onclick="place(rect5.id)" x="234.5" y="234.5" width="230" height="230" fill="black"/>
<rect class="rect6css" id="rect6" onclick="place(rect6.id)" x="467.5" y="234.5" width="230" height="230" fill="black"/>
<rect class="rect7css" id="rect7" onclick="place(rect7.id)" x="1.5" y="467.5" width="230" height="230" fill="black"/>
<rect class="rect8css" id="rect8" onclick="place(rect8.id)" x="234.5" y="467.5" width="230" height="230" fill="black"/>
<rect class="rect9css" id="rect9" onclick="place(rect9.id)" x="467.5" y="467.5" width="230" height="230" fill="black"/>

</svg>

</div>

    <script>

//The below is just some variables being declared for the following code
      let player
      let AImode = 0
      let oldMove
      let clientSession
      let newInterval
      let readyInterval
      let checkInterval
      let checkIntervalSecond
      let checkIntervalGameStart
      let checkIntervalMoveTimer
      let checkIntervalMoveTimerOpponent
      let opponentMove
      let movesArrayOpponent = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      let movesArrayFriendly = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      let combinedArr = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
      let myTurn
      let activeStatus
      let opponentActiveStatus = 0;
      let connectionCheckerStatus
      let gameStart = 0
      let timeDetail = 1

      function setStatusMsg(statusMsg, colour) { //This function changes the in game visible status message
        document.getElementById("matchStatus").innerHTML = statusMsg
        document.getElementById("matchStatus").style.color = colour;
      }

      function setStatusMsgTimer(statusMsg, colour) { //This function changes the in game visible status message, same as above but compatible with timer
        document.getElementById("matchStatus").innerHTML = statusMsg + " seconds remaining on your turn"
        document.getElementById("matchStatus").style.color = colour;
      }

      function setStatusMsgTimerOpponent(statusMsg, colour) { //This function changes the in game visible status message, same as above but compatible with timer
        document.getElementById("matchStatus").innerHTML = statusMsg + " seconds remaining on opponents turn"
        document.getElementById("matchStatus").style.color = colour;
      }

      function setEndScreen(statusMsg, colour) { //This function opens the end screen overaly and cancels any active code
        document.getElementById("endScreen").innerHTML = statusMsg;
        document.getElementById("endScreen").style.color = colour;
        document.getElementById("myNav").style.height = "100%";
        stopIntervals()
      }

      function closeNav() { //This function closes the end screen overaly
        document.getElementById("myNav").style.height = "0%";
      }

      function styleToggle() { //This function enables the visible noughts or crosses, depending on which player you are
        if (player == 1) {
          let lineArray = ["line1", "line11", "line2", "line21", "line3", "line31", "line4", "line41", "line5", "line51", "line6", "line61", "line7", "line71", "line8", "line81", "line9", "line91"]
          lineArray.forEach(newStyleFunc)
          function newStyleFunc (lineValue) {
            document.getElementById(lineValue).style.stroke = "white";
          }
        }
        else if (player == 2) {
          let circArray = ["circ1", "circ2", "circ3", "circ4", "circ5", "circ6", "circ7", "circ8", "circ9"]
          circArray.forEach(newStyleFuncCirc)
          function newStyleFuncCirc (circValue) {
            document.getElementById(circValue).style.stroke = "white";
          }
        }
      }

      function moveTimerFriendly() { //This function sets a 30 second timer on each of the local players move, the game ends if a player exceeds the time limit
        clearInterval(checkIntervalMoveTimer);
        checkIntervalMoveTimer = setInterval(startMoveTimer, 1000)
        timeDetail = 30
        setStatusMsgTimer(timeDetail, "green")
        
        function startMoveTimer() {
          timeDetail -= 1;
          setStatusMsgTimer(timeDetail, "green")
          if (timeDetail == 0) {
            setEndScreen("YOU LOOSE! you ran out of time", "red")
        }
        }
      }

      function stopFriendlyTimer() { //This function stops the turn timer after you do your move
        clearInterval(checkIntervalMoveTimer)
      }

      function moveTimerOpponent() { //This function sets a 30 second timer on each of the opponents move, the game ends if a player exceeds the time limit
        clearInterval(checkIntervalMoveTimerOpponent);
        checkIntervalMoveTimerOpponent = setInterval(startMoveTimerOpponent, 1000)
        timeDetail = 30
        setStatusMsgTimerOpponent(timeDetail, "red")
        
        function startMoveTimerOpponent() {
          timeDetail -= 1;
          setStatusMsgTimerOpponent(timeDetail, "red")
          if (timeDetail == 0) {
            setEndScreen("YOU WIN! your opponent ran out of time", "green")
        }
        }
      }

      function stopOpponentTimer() { //This function stops the opponents turn timer after they do their move
        clearInterval(checkIntervalMoveTimerOpponent)
      }

      function draw() { //This function checks if the game is a draw after each move
	      combinedArr = movesArrayOpponent.map((val, index) => {
		      if (val === 0) {
			      return movesArrayFriendly[index];
		      } else {
			      return val;
		      }
	      });
	      combinedArr[0] = 1;
	      let arrayMovesCheckerDraw = combinedArr.find(item => item == 0)
	      if (arrayMovesCheckerDraw == undefined) {
          setEndScreen("ITS A DRAW!", "yellow")
          gameStart = 0
	      }
      }
      
      function winner() { //This function checks if the game has a winner after each move
        let winningCombinations = [123, 456, 789, 147, 258, 369, 159, 357]
        winningCombinations.forEach(checkForWinnerFriendly)
        function checkForWinnerFriendly (winnerValue) {
          let stringIt = JSON.stringify(winnerValue)
          let first = stringIt.charAt(stringIt.length-3)
          let second = stringIt.charAt(stringIt.length-2)
          let third = stringIt.charAt(stringIt.length-1)
          let arrayMovesCheckerFirst = movesArrayFriendly.find(item => item == first)
          let arrayMovesCheckerSecond = movesArrayFriendly.find(item => item == second)
          let arrayMovesCheckerThird = movesArrayFriendly.find(item => item == third)
          if (arrayMovesCheckerFirst !== undefined && arrayMovesCheckerSecond !== undefined && arrayMovesCheckerThird !== undefined) {
            setEndScreen("YOU WIN!", "green")
            gameStart = 0
          }
          else {
            winningCombinations.forEach(checkForWinnerOpponent)
            function checkForWinnerOpponent (winnerValue) {
            let stringIt = JSON.stringify(winnerValue)
            let first = stringIt.charAt(stringIt.length-3)
            let second = stringIt.charAt(stringIt.length-2)
            let third = stringIt.charAt(stringIt.length-1)
            let arrayMovesCheckerFirst = movesArrayOpponent.find(item => item == first)
            let arrayMovesCheckerSecond = movesArrayOpponent.find(item => item == second)
            let arrayMovesCheckerThird = movesArrayOpponent.find(item => item == third)
          if (arrayMovesCheckerFirst !== undefined && arrayMovesCheckerSecond !== undefined && arrayMovesCheckerThird !== undefined) {
            setEndScreen("YOU LOOSE!", "red")
            gameStart = 0
          }
          else if (gameStart == 1) {
            draw()
              }
            }
          }
        }
      }

      const socket = new WebSocket("ws://localhost:8081"); //Connects to the websocket server running the tictactoe server

      function resetGameVariables() { //This function resets all game variables for when a game is done
          movesArrayOpponent = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          movesArrayFriendly = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          combinedArr = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          myTurn = 1;
          activeStatus = 0;
          AImode = 0
          opponentActiveStatus = 0;
          connectionCheckerStatus = 0;
          gameStart = 0;
          oldMove = undefined;
          timeDetail = 1
          stopIntervals()
          document.getElementById("button1").innerHTML = "Find a match!"
          document.getElementById("button2").innerHTML = "Or play against a bot!"
        }

        function stopIntervals() { //This function just stops any background timers/intervals/checks
          clearInterval(newInterval)
          clearInterval(readyInterval)
          clearInterval(checkInterval)
          clearInterval(checkIntervalSecond)
          clearInterval(checkIntervalGameStart)
          clearInterval(checkIntervalMoveTimer)
          clearInterval(checkIntervalMoveTimerOpponent)
        }

        function removeStyles() { //This function resets the 3x3 noughts and crosses canvas, removing any noughts or crosses
          let lineArraySecond = ["line1", "line11", "line2", "line21", "line3", "line31", "line4", "line41", "line5", "line51", "line6", "line61", "line7", "line71", "line8", "line81", "line9", "line91"]
          lineArraySecond.forEach(newStyleFuncSecond)
          function newStyleFuncSecond (lineValueSecond) {
            document.getElementById(lineValueSecond).style.removeProperty('stroke');
          }
        
          let circArraySecond = ["circ1", "circ2", "circ3", "circ4", "circ5", "circ6", "circ7", "circ8", "circ9"]
          circArraySecond.forEach(newStyleFuncCircSecond)
          function newStyleFuncCircSecond (circValueSecond) {
            document.getElementById(circValueSecond).style.removeProperty('stroke');
          }

          let rectArray = ["rect1", "rect2", "rect3", "rect4", "rect5", "rect6", "rect7", "rect8", "rect9"]
          rectArray.forEach(newStyleFuncRect)
          function newStyleFuncRect (rectValue) {
            document.getElementById(rectValue).style.removeProperty('opacity');
          }
        }

        function startTheGame() { //This is a precaution to allow player connections 2501ms to complete before starting the game
        clearInterval(checkIntervalGameStart);
        checkIntervalGameStart = setInterval(retrieveUpdateConnection, 2501)
        
        function retrieveUpdateConnection() { //Waits 2501 ms to allow connections
          gameStart = 1
          styleToggle()
          setStatusMsg("Player found, begin!", "green")
          clearInterval(checkIntervalGameStart)
        }
      }

      function findPlayerButton() { //This is the primary function the user selects that starts the match making search
        if (AImode == 1) {
          startAIMatch()
        }
        else {
          removeStyles()
          resetGameVariables()
          let objectWSFindPlayer = ({type: "waiting"})
          socket.send(JSON.stringify(objectWSFindPlayer));
          setStatusMsg("Searching for second player...", "yellow")
          function handleMessage(message) {
            let messageJson = JSON.parse(message.data)
            console.log(messageJson)
            if (player == 1 && clientSession == messageJson.sessionIdServer) {
              socket.removeEventListener('message', handleMessage);
              player = undefined;
              clientSession = undefined;
              findPlayerButton()
            }
            else {
            socket.removeEventListener('message', handleMessage);
            if (messageJson.playerNum == "1") {
              clientSession = messageJson.sessionIdServer
              player = 1;
              setStatusMsg("Searching for second player...", "yellow")
              playerFound()
              function playerFound () {
                ready();
                clearInterval(newInterval);
                newInterval = setInterval(retrievePlayerUpdate, 250)
                function retrievePlayerUpdate() { //Requests a update every 250 miliseconds from the server if a player is found
                  let objectWSGetPlayerUpdate = ({type: "getPlayerUpdate", sessionId: clientSession, player: player})
                  socket.send(JSON.stringify(objectWSGetPlayerUpdate));
                  socket.addEventListener('message', function (message) {
                    let messageJsonFound = JSON.parse(message.data)
                    if (messageJsonFound.messageType == "foundPlayer") {
                      clearInterval(newInterval);
                      player = 1;
                      checkForDisconnect()
                      startTheGame()
                    }
                  })
                }
            }
          }
            else if (messageJson.playerNum == "2") {
              player = undefined;
              clientSession = undefined;
              clientSession = messageJson.sessionIdServer
              checkForOpponent()
            }
          }
          };
          socket.addEventListener('message', handleMessage);
        }
        } 

        function place(location) { //This function is activated every time the local player does a move, it sends the move to the tictactoe server and sets it locally aswell
          if (gameStart == 1) {
          let locationNumber = location.charAt(location.length-1)
          let checkMovesArray = movesArrayOpponent.find(item => item == locationNumber)
          let checkFriendlyMovesArray = movesArrayFriendly.find(item => item == locationNumber)
          if (checkMovesArray == undefined && checkFriendlyMovesArray == undefined && myTurn == 1) {
            if (player == 1) {
            let elementValueLine = "line" + locationNumber;
            let elementValueLineSecond = "line" + locationNumber + "1";
            let elementStyleRectLine = "rect" + locationNumber;
            document.getElementById(elementValueLine).style.stroke = "white";
            document.getElementById(elementValueLineSecond).style.stroke = "white";
            document.getElementById(elementStyleRectLine).style.opacity = "0";
            movesArrayFriendly.splice(locationNumber, 1, locationNumber)
            myTurn = 0;
            winner()
            stopFriendlyTimer()
            moveTimerOpponent()
          }
          if (player == 2) {
            let elementValueCirc = "circ" + locationNumber;
            let elementStyleRectCirc = "rect" + locationNumber;
            document.getElementById(elementValueCirc).style.stroke = "white";
            document.getElementById(elementStyleRectCirc).style.opacity = "0";
            movesArrayFriendly.splice(locationNumber, 1, locationNumber)
            myTurn = 0;
            winner()
            stopFriendlyTimer()
            moveTimerOpponent()
          }
          let objectWSLocation = ({type: "updateLocation", sessionId: clientSession, player: player, locationNumber: locationNumber})
          socket.send(JSON.stringify(objectWSLocation));
          }
        }
        }

      function checkForDisconnect() { //This function checks if the opponent has disconnected, it ends the game if the opponent has been unresponsive for over 5000ms
        clearInterval(checkInterval);
        checkInterval = setInterval(retrieveUpdateConnection, 5000)
        
        function retrieveUpdateConnection() { //Checks player connection status every 5000 miliseconds
          if (opponentActiveStatus == connectionCheckerStatus) {
            setEndScreen("OPPONENT HAS DISCONNECTED!", "red")
          }
          else {
          connectionCheckerStatus = opponentActiveStatus
        }
        }
      }

      function ready() { //This function sends the tictactoe server an update every 100ms asking for the opponents connection status, it also sends the local connection status which gets passed on to the opponent to confirm both users are still online
        clearInterval(readyInterval);
        readyInterval = setInterval(retrieveUpdate, 100)

        function retrieveUpdate() { //Requests a player update every 100 miliseconds from the server
          let objectWSGetUpdate = ({type: "getUpdate", sessionId: clientSession, player: player, activeStatusMsg: activeStatus})
          socket.send(JSON.stringify(objectWSGetUpdate));
          activeStatus++
          function handleMessageInfo(message) {
            let messageToJson = JSON.parse(message.data)
            if (messageToJson.locationNumberUpdate !== oldMove) {
              socket.removeEventListener('message', handleMessageInfo);
              updateOpponentMove(messageToJson.locationNumberUpdate)
            }
            opponentActiveStatus = messageToJson.activeStatusOpp;
            socket.removeEventListener('message', handleMessageInfo);
        }
        socket.addEventListener('message', handleMessageInfo);
        }
      }

      function checkForOpponent() { //This function only activates if you are player 2, it prevents loading into a game where there is no player 1 and will just automatically join a new game session if there is no player 1
        player = 2;
        ready()
        clearInterval(checkIntervalSecond);
        checkIntervalSecond = setInterval(retrieveUpdateOpponent, 2500)
        
        function retrieveUpdateOpponent() { //Checks if theres an opponent status every 2500 miliseconds
          if (opponentActiveStatus == connectionCheckerStatus) {
            findPlayerButton()
            clearInterval(checkIntervalSecond);
          }
          else {
              gameStart = 1
              setStatusMsg("Player found, begin!", "green")
              styleToggle()
              checkForDisconnect()
              clearInterval(checkIntervalSecond);
          }
        }
      }

      function updateOpponentMove(opMove) { //This function gets called from the ready() function with data about whether the opponent has done a new move yet, if a new move is done it places the move locally to be visible on screen
        if (opMove !== "NA" && gameStart == 1) {
          oldMove = opMove
        if (player == 1) {
          let elementValueCirc = "circ" + opMove;
          let elementStyleRectCirc = "rect" + opMove;
          let elementValueCircLine = "line" + opMove;
          let elementValueCircLineSecond = "line" + opMove + "1";
          document.getElementById(elementValueCirc).style.stroke = "white";
          document.getElementById(elementStyleRectCirc).style.opacity = "0";
          document.getElementById(elementValueCircLine).style.stroke = "none";
          document.getElementById(elementValueCircLineSecond).style.stroke = "none";
          movesArrayOpponent.splice(opMove, 1, opMove)
          myTurn = 1;
          winner()
          stopOpponentTimer()
          moveTimerFriendly()
        }
        else if (player == 2) {
          let elementValueLine = "line" + opMove;
          let elementValueSecondLine = "line" + opMove + "1";
          let elementStyleRectLine = "rect" + opMove;
          let elementValueLineCirc = "circ" + opMove;
          document.getElementById(elementValueLine).style.stroke = "white";
          document.getElementById(elementValueSecondLine).style.stroke = "white";
          document.getElementById(elementStyleRectLine).style.opacity = "0";
          document.getElementById(elementValueLineCirc).style.stroke = "none";
          movesArrayOpponent.splice(opMove, 1, opMove)
          myTurn = 1;
          winner()
          stopOpponentTimer()
          moveTimerFriendly()
        }
      }
      }

      function playAgainstAI() {
        if (AImode == 1) {
          resetGameVariables()
          setStatusMsg("Press 'Find a match!' to begin searching for a match", "red")
        }
        else {
          resetGameVariables()
          removeStyles()
          AImode = 1
          setStatusMsg("Press 'Start' to begin a match against a bot!", "red")
          document.getElementById("button1").innerHTML = "Start"
          document.getElementById("button2").innerHTML = "Or play multiplayer mode!"
        }
      }

      function startAIMatch() {
        
      }

    </script>
  
</body>
</html>